#include "Game.hpp"

//////////////////////////////////////////////////////////////////////////
class CCVarSaveDump : public ICVarDumpSink
{
private:
	FILE *m_pFile;
public:
	CCVarSaveDump(FILE *pFile)
	{
		m_pFile=pFile;
	}
	void OnElementFound(ICVar *pCVar) override
	{
		if (pCVar && (pCVar->GetFlags() & VF_DUMPTODISK))
		{
			string szValue = pCVar->GetString();
			int pos;

			// replace \ with \\ 
			pos = 1;
			for(;;)
			{
				pos = szValue.find_first_of("\\", pos);

				if (pos == string::npos)
				{
					break;
				}

				szValue.replace(pos, 1, "\\\\", 2);
				pos+=2;
			}

			// replace " with \" 
			pos = 1;
			for(;;)
			{
				pos = szValue.find_first_of("\"", pos);

				if (pos == string::npos)
				{
					break;
				}

				szValue.replace(pos, 1, "\\\"", 2);
				pos+=2;
			}

			string szLine = pCVar->GetName();
			szLine += " = \"";
			szLine += szValue;
			szLine += "\"\r\n";

			fputs(szLine.c_str(), m_pFile);
		}
	}
};

//////////////////////////////////////////////////////////////////////////
void CGame::SaveConfiguration( const char *pszSystemCfg,const char *pszGameCfg,const char *sProfileName)
{
	string sSystemCfg = pszSystemCfg;
	string sGameCfg = pszGameCfg;
	if (sProfileName)
	{	
		sSystemCfg=string("Profiles/Player/")+sProfileName+"_"+sSystemCfg;
		sGameCfg=string("Profiles/Player/")+sProfileName+"_"+sGameCfg;		
	}

	FILE *pFile=fopen(sSystemCfg.c_str(), "wb");
	if (pFile)
	{
		fputs("-- [System-Configuration]\r\n", pFile);
		fputs("-- Attention: This file is generated by the system, do not modify! Editing is not recommended! \r\n\r\n", pFile);
		CCVarSaveDump SaveDump(pFile);
		m_pSystem->GetIConsole()->DumpCVars(&SaveDump);		
		fclose(pFile); 
	}

}

//////////////////////////////////////////////////////////////////////////
void CGame::LoadConfiguration(const string &sSystemCfg,const string &sGameCfg)
{			
	m_pSystem->LoadConfiguration(sSystemCfg);

	FILE *pFile=fopen(sGameCfg.c_str(), "rb");
	if (!pFile)
	{
		m_pLog->Log("Error Loading game configuration '%s'",sGameCfg.c_str());
		// if for some reason the game config is not found 
		// (first time, new installation etc.) create a new one with basic stuff in it
		return;
	}
	
	char szLine[512];
	char szBuffer[512];
	while (fgets(szLine,512,pFile))
	{			
		// skip comments
		if (szLine[0]=='-')
			continue; 

		// extract command
		if (!strstr(szLine,";"))
			continue;

		// check for malicious commands
		bool bValid=false;
				
		if (strstr(szLine,"#"))
		{
			// someone is trying to bind script code
			// to a key - silently skip this line
			continue;
		}
		else
		if (strstr(szLine,"Input:ResetAllBindings"))
		{
			// valid command
			bValid=true;
		}
		else
		if (strstr(szLine,"Input:BindAction"))
		{
			// valid command
			bValid=true;
		}
		else
		if (strstr(szLine,"Input:BindCommandToKey"))
		{
			//if (strstr(szLine,"SkipCutScene"))											
			// valid command
			bValid=true;
		}					

		if (bValid)
		{					
			strcpy(szBuffer,szLine);
			m_pLog->Log("  '%s'",szBuffer);
			m_pSystem->GetIScriptSystem()->ExecuteBuffer(szBuffer,strlen(szBuffer));
		}
		else
		{
			m_pSystem->GetILog()->Log("Invalid game cfg:%s",szLine);
		}
	}

	fclose(pFile);
} 



